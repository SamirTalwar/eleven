#!/usr/bin/env zsh

set -e
set -u
set -o pipefail

cd $(dirname $(dirname $0))

pid_file=$(mktemp)
pid=''

out_diff_file=$(mktemp)
err_diff_file=$(mktemp)

command -v git > /dev/null && diff=(git diff --no-index --color) || diff=(diff)

function set_up {
  sleep 1
  ./app --detach --pid-file=$pid_file $1
  pid=$(<$pid_file)
  sleep 1
}

function tear_down {
  rm -f $pid_file $out_diff_file $err_diff_file
  if app_is_alive; then
    kill $pid
    for i in {1..20}; do
      app_is_alive || break
      sleep 0.1
    done
    if app_is_alive; then
      echo >&2 "The application (PID ${pid}) has not terminated. Better investigate." && exit 1
    fi
  fi
}

function app_is_alive {
  [[ -n $pid ]] && kill -0 $pid >& /dev/null
}

function prefix {
  sed "s/^/$1/"
  while IFS=$'\n' read line; do
    echo -n $1
    echo $line
  done
}

trap tear_down EXIT

if [[ $# -gt 0 ]]; then
  tests=$@
else
  tests=(test/cases/*)
fi

success=true
for dir in ${tests[@]}; do
  test_passed=true
  echo
  echo $dir
  rm -f "${dir}/out.actual" "${dir}/err.actual"
  set_up $(<"${dir}/config-path") 2> "${dir}/err.actual"

  set +e
  "./${dir}/test" > "${dir}/out.actual"
  exit_status=$?
  set -e

  tear_down

  [[ $exit_status -eq 0 ]] || test_passed=false
  ${diff[@]} "${dir}/out" "${dir}/out.actual" > $out_diff_file || test_passed=false
  ${diff[@]} "${dir}/err" "${dir}/err.actual" > $err_diff_file || test_passed=false

  if $test_passed; then
    echo '  succeeded'
  else
    echo '  failed'
    echo "  exit status: ${exit_status}"
    echo '  standard output:'
    cat $out_diff_file | prefix '    '
    echo '  standard error:'
    cat $err_diff_file | prefix '    '
    success=false
  fi
done

$success
