#!/usr/bin/env zsh

set -e
set -u
set -o pipefail

cd $(dirname $(dirname $0))

pid_file=$(mktemp)
pid=''

out_diff_file=$(mktemp)
err_diff_file=$(mktemp)

command -v git > /dev/null && diff=(git diff --no-index --color) || diff=(diff)

function set_up {
  set -e
  ./app --detach --pid-file=$pid_file $@
  pid=$(< $pid_file)
}

function tear_down {
  rm -f $pid_file $out_diff_file $err_diff_file
  if app_is_alive; then
    kill $pid
    for i in {1..20}; do
      app_is_alive || break
      sleep 0.1
    done
    if app_is_alive; then
      echo >&2 "The application (PID ${pid}) has not terminated. Better investigate."
      return 1
    fi
  fi
}

function shut_down {
  local exit_status=$?
  tear_down
  exit $exit_status
}

function app_is_alive {
  [[ -n $pid ]] && kill -0 $pid >& /dev/null
}

function run_test {
  local dir test_passed arguments exit_status out_file err_file
  dir=$1
  test_passed=true
  out_file="${dir}/out.actual"
  err_file="${dir}/err.actual"

  echo $dir
  rm -f $out_file $err_file

  IFS=$'\n' arguments=($(< "${dir}/arguments"))
  exit_status=0
  set_up ${arguments[@]} > $out_file 2> $err_file || exit_status=$?
  if [[ $exit_status -ne 0 ]]; then
    echo '  failed to start'
    echo "  exit status: ${exit_status}"
    echo '  standard output:'
    cat $out_file | prefix '    '
    echo '  standard error:'
    cat $err_file | prefix '    '
    return 2
  fi

  exit_status=0
  "./${dir}/test" >> $out_file 2>> $err_file || exit_status=$?

  tear_down || :
  [[ $? -eq 0 ]] || test_passed=false

  [[ $exit_status -eq 0 ]] || test_passed=false
  ${diff[@]} "${dir}/out" $out_file > $out_diff_file || test_passed=false
  ${diff[@]} "${dir}/err" $err_file > $err_diff_file || test_passed=false

  if $test_passed; then
    echo '  succeeded'
  else
    echo '  failed'
    echo "  exit status: ${exit_status}"
    echo '  standard output:'
    cat $out_diff_file | prefix '    '
    echo '  standard error:'
    cat $err_diff_file | prefix '    '
    return 1
  fi

  return 0
}

function prefix {
  sed "s/^/$1/"
  while IFS=$'\n' read line; do
    echo -n $1
    echo $line
  done
}

trap shut_down INT TERM EXIT

if [[ $# -gt 0 ]]; then
  tests=($@)
else
  tests=(test/cases/*)
fi

docker-compose up test-infrastructure
docker exec -i eleven_postgresql_1 psql -U postgres <<< 'DROP TABLE IF EXISTS items;'

success=true
for dir in ${tests[@]}; do
  echo
  run_test $dir || success=false
done

$success
